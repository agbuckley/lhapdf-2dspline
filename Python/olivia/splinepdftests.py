#! /usr/bin/env python

import numpy as np
from bicubicspline import BicubicSpline
import lhapdf


# read in pdf data values:
file_path = 'PDFsets/NNPDF40_nlo_pch_as_01180/NNPDF40_nlo_pch_as_01180_0000.dat'

xs = np.loadtxt(file_path, skiprows=3, max_rows=1)

Qs_1 = np.loadtxt(file_path, skiprows=4, max_rows=1)
Qs_2 = np.loadtxt(file_path, skiprows=6+xs.size*Qs_1.size+2, max_rows=1)
Qs_3 = np.loadtxt(file_path, skiprows=6+xs.size*Qs_1.size+4+xs.size*Qs_2.size+2, max_rows=1)
Qs = np.concatenate((Qs_1[:-1], Qs_2[:-1], Qs_3))
# would actually need to make separate splines on each Q range,
# then concatenate them for plotting, important for c and b pdfs

xfs_g_1 = np.loadtxt(file_path, skiprows=6, max_rows=xs.size*Qs_1.size, usecols=5)
xfs_u_1 = np.loadtxt(file_path, skiprows=6, max_rows=xs.size*Qs_1.size, usecols=7)
xfs_g_2 = np.loadtxt(file_path, skiprows=6+xs.size*Qs_1.size+4, max_rows=xs.size*Qs_2.size, usecols=5)
xfs_u_2 = np.loadtxt(file_path, skiprows=6+xs.size*Qs_1.size+4, max_rows=xs.size*Qs_2.size, usecols=7)
xfs_g_3 = np.loadtxt(file_path, skiprows=6+xs.size*Qs_1.size+4+xs.size*Qs_2.size+4, max_rows=xs.size*Qs_3.size, usecols=5)
xfs_u_3 = np.loadtxt(file_path, skiprows=6+xs.size*Qs_1.size+4+xs.size*Qs_2.size+4, max_rows=xs.size*Qs_3.size, usecols=7)

xfs_g_1 = xfs_g_1.reshape((xs.size, Qs_1.size))
xfs_g_1 = xfs_g_1[:, :Qs_1.size-1]
xfs_u_1 = xfs_u_1.reshape((xs.size, Qs_1.size))
xfs_u_1 = xfs_u_1[:, :Qs_1.size-1]

xfs_g_2 = xfs_g_2.reshape((xs.size, Qs_2.size))
xfs_g_2 = xfs_g_2[:, :Qs_2.size-1]
xfs_u_2 = xfs_u_2.reshape((xs.size, Qs_2.size))
xfs_u_2 = xfs_u_2[:, :Qs_2.size-1]

xfs_g_3 = xfs_g_3.reshape((xs.size, Qs_3.size))
xfs_u_3 = xfs_u_3.reshape((xs.size, Qs_3.size))

xfs_g = np.swapaxes(np.hstack((xfs_g_1, xfs_g_2, xfs_g_3)), 0, 1)
xfs_u = np.swapaxes(np.hstack((xfs_u_1, xfs_u_2, xfs_u_3)), 0, 1)

# consider visually useful slices of the data
xs_slice = xs[xs > 9e-4]
Qs_slice = Qs[Qs < 1.2e4]
xfs_g_slice = xfs_g[:Qs_slice.size, -xs_slice.size:]
xfs_u_slice = xfs_u[:Qs_slice.size, -xs_slice.size:]

# take squares of Q values since the xf values are given as xf(x, Q^2)
Q2s = Qs**2
Q2s_slice = Qs_slice**2

# convert x and Q2 into log space to avoid ringing artefacts
logxs = np.log10(xs)
logQ2s = np.log10(Q2s)
logxs_slice = np.log10(xs_slice)
logQ2s_slice = np.log10(Q2s_slice)

# construct pdf using existing lhapdf patch algorithm
pdf = lhapdf.mkPDF('NNPDF40_nlo_pch_as_01180')

# spline the raw pdf data; plot it and its derivatives;
# compare to pdf generated by patch algorithm
splinepdf_g = BicubicSpline(logxs, logQ2s, xfs_g, fname='PPEplots/splinepdfplots/splinepdf_g', plot1d=True)
splinepdf_g.plotSpline(scale='log', func=pdf.xfxQ2, fl=21, pdf=True, fname='PPEplots/splinepdfplots/splinepdf_g', axes=['$x$', '$Q^2$', '$xf(x, Q^2)$'])
splinepdf_g.plotSplineDerivative(order=1, num=100, scale='log', fname='PPEplots/splinepdfplots/splinepdf_g', axes=['$x$', '$Q^2$', '$xf(x, Q^2)$'], plot1d=True, index_x=10, index_y=40)
splinepdf_g.plotSplineDerivative(order=2, num=100, scale='log', fname='PPEplots/splinepdfplots/splinepdf_g', axes=['$x$', '$Q^2$', '$xf(x, Q^2)$'], plot1d=True, index_x=10, index_y=40)

splinepdf_u = BicubicSpline(logxs, logQ2s, xfs_u, fname='PPEplots/splinepdfplots/splinepdf_u', plot1d=True)
splinepdf_u.plotSpline(scale='log', func=pdf.xfxQ2, fl=2, pdf=True, fname='PPEplots/splinepdfplots/splinepdf_u', axes=['$x$', '$Q^2$', '$xf(x, Q^2)$'])
splinepdf_u.plotSplineDerivative(order=1, num=100, scale='log', fname='PPEplots/splinepdfplots/splinepdf_u', axes=['$x$', '$Q^2$', '$xf(x, Q^2)$'], plot1d=True, index_x=30, index_y=25)
splinepdf_u.plotSplineDerivative(order=2, num=100, scale='log', fname='PPEplots/splinepdfplots/splinepdf_u', axes=['$x$', '$Q^2$', '$xf(x, Q^2)$'], plot1d=True, index_x=30, index_y=25)

splinepdf_g_slice = BicubicSpline(logxs_slice, logQ2s_slice, xfs_g_slice, fname='PPEplots/splinepdfplots/splinepdf_g_slice', plot1d=True)
splinepdf_g_slice.plotSpline(scale='log', func=pdf.xfxQ2, fl=21, pdf=True, fname='PPEplots/splinepdfplots/splinepdf_g_slice', axes=['$x$', '$Q^2$', '$xf(x, Q^2)$'])
splinepdf_g_slice.plotSplineDerivative(order=1, num=100, scale='log', fname='PPEplots/splinepdfplots/splinepdf_g_slice', axes=['$x$', '$Q^2$', '$xf(x, Q^2)$'], plot1d=True, index_x=10, index_y=40)
splinepdf_g_slice.plotSplineDerivative(order=2, num=100, scale='log', fname='PPEplots/splinepdfplots/splinepdf_g_slice', axes=['$x$', '$Q^2$', '$xf(x, Q^2)$'], plot1d=True, index_x=10, index_y=40)

splinepdf_u_slice = BicubicSpline(logxs_slice, logQ2s_slice, xfs_u_slice, fname='PPEplots/splinepdfplots/splinepdf_u_slice', plot1d=True)
splinepdf_u_slice.plotSpline(scale='log', func=pdf.xfxQ2, fl=2, pdf=True, fname='PPEplots/splinepdfplots/splinepdf_u_slice', axes=['$x$', '$Q^2$', '$xf(x, Q^2)$'])
splinepdf_u_slice.plotSplineDerivative(order=1, num=100, scale='log', fname='PPEplots/splinepdfplots/splinepdf_u_slice', axes=['$x$', '$Q^2$', '$xf(x, Q^2)$'], plot1d=True, index_x=30, index_y=25)
splinepdf_u_slice.plotSplineDerivative(order=2, num=100, scale='log', fname='PPEplots/splinepdfplots/splinepdf_u_slice', axes=['$x$', '$Q^2$', '$xf(x, Q^2)$'], plot1d=True, index_x=30, index_y=25)